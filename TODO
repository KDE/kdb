Buildsystem:
[ ] find replacement for -DKDE_DEFAULT_DEBUG_AREA=44000
[ ] move drivers/ to the main dir
[ ] move *Validator classes from tools to a separate PredicateGui lib
[x] version macros like PREDICATE_VERSION are generated using cmake

Drivers:
[x] add SQLite driver for 3.6.1+ version (use FindSQLite.cmake);
    Compatibility with Kexi 1.x (SQlite 3.2.8) is acheived because we use the 1st
    file format of SQLite, which is the default for 3.3.6+.
    (see http://www.sqlite.org/formatchng.html)
[ ] TODO: let's add this note:
     In June 2006 we have migrated to 3.2.8 from 3.0.7
     (http://websvn.kde.org/trunk/koffice/kexi/3rdparty/kexisql3/version?view=log)
     Thus, any future use autovacuum will make the db read-only for 3.0.7-based drivers
     and ALTER TABLE ADD COLUMN will make it unreadable for 3.0.7-based drivers 
     unless VACUUM is executed. We hope it will not be a problem by the time
     we decide to use these features in the final, since 3.0.7-based Kexi will be already
     3 years old. It will be always possible to perform simple migration using the following command
     "sqlite-old old.db .dump | sqlite-new new.db"
[x] MySQL driver builds
[ ] Port the ODBC driver (untouched for now)

Naming, API:
[ ] what to do with kexi__ prefix for db objects (backward compat.)?
[ ] apply rules from http://techbase.kde.org/Policies/Library_Code_Policy
[x] driver's .desktop file format changed:
"X-Kexi-DriverName" -> "DriverName"
"X-KDE-Library" -> "FileName"
"X-Kexi-DriverType" -> "DriverType"
"X-Kexi-FileDBDriverMime" -> "FileDBDriverMime"
"X-Kexi-DoNotAllowProjectImportingTo" -> "AllowImporting"
[ ] change the above in kexidb-qt3 too
[ ] make Driver::Features use Q_FLAGS

Optimization & Cleanup
[ ] use QLatin1String where possible

TODO: port files (Legend: *-compiles, no warnings; **-cleanup and naming notes also applied)
  Admin.cpp
  Alter.cpp
*  Connection.cpp
- prepareStatementInternal() has now no arguments and has PreparedStatementInterface* return type
TODO: move to Connection::prepareStatement() and all the drv_*() to ConnectionInterface just like we moved execute() and prepare() to PreparedStatementInterface...
*  Connectiondata.cpp
*  Cursor.cpp
  DbObjectNameValidator.cpp
  DbProperties.cpp
**  Driver.cpp
- Driver::Info is implicitly shared class now
- Driver::fileDBDriverMimeType() moved to Driver::Info::fileDBMimeType()
- Driver::isFileDriver() renamed to Driver::isFileBased(), also available as Driver::Info::isFileBased()
**  DriverManager.cpp
  drivers/mysql/MysqlConnection.cpp
  drivers/mysql/MysqlConnection_p.cpp
  drivers/mysql/MysqlCursor.cpp
  drivers/mysql/MysqlDriver.cpp
  drivers/mysql/MysqlKeywords.cpp
  drivers/mysql/MysqlPreparedStatement.cpp
- for now it's nonfunctional; port and improve code within PREDICATE_USE_MYSQL_STMT
  drivers/odbc/odbcconnection.cpp
  drivers/odbc/odbcdriver.cpp
  drivers/oracle/oracleconnection.cpp
  drivers/oracle/oracleconnection_p.cpp
  drivers/oracle/oraclecursor.cpp
  drivers/oracle/oracledriver.cpp
  drivers/oracle/oraclekeywords.cpp
  drivers/oracle/oraclepreparedstatement.cpp
  drivers/pqxx/PqxxConnection.cpp
  drivers/pqxx/PqxxConnection_p.cpp
  drivers/pqxx/PqxxCursor.cpp
  drivers/pqxx/PqxxDriver.cpp
  drivers/pqxx/PqxxKeywords.cpp
  drivers/pqxx/PqxxPreparedStatement.cpp
  drivers/sqlite/SqliteAdmin.cpp
  drivers/sqlite/SqliteAlter.cpp
  drivers/sqlite/SqliteConnection.cpp
  drivers/sqlite/SqliteCursor.cpp
  drivers/sqlite/SqliteDriver.cpp
  drivers/sqlite/SqliteKeywords.cpp
  drivers/sqlite/SqlitePreparedStatement.cpp
  drivers/sqlite/SqliteVacuum.cpp
  drivers/sybase/SybaseConnection.cpp
  drivers/sybase/SybaseConnection_p.cpp
  drivers/sybase/SybaseCursor.cpp
  drivers/sybase/SybaseDriver.cpp
  drivers/sybase/SybaseKeywords.cpp
  drivers/sybase/SybasePreparedStatement.cpp
  drivers/xbase/XbaseConnection.cpp
  drivers/xbase/XbaseConnection_p.cpp
  drivers/xbase/XbaseCursor.cpp
  drivers/xbase/XbaseDriver.cpp
  drivers/xbase/XbaseExport.cpp
  drivers/xbase/XbaseKeywords.cpp
*  Driver_p.cpp
*  Expression.cpp
*  Field.cpp
*  FieldList.cpp
- added isEmpty()
  FieldValidator.cpp
*  Global.cpp
*  IndexSchema.cpp
*  keywords.cpp
*  LookupFieldSchema.cpp
  MessageHandler.cpp
*  Object.cpp
*  parser/Parser.cpp
*  parser/Parser_p.cpp
*  parser/SqlParser.cpp
*  parser/SqlScanner.cpp
*  parser/tokens.cpp
  PreparedStatement.cpp
- it's implicitly shared class now
- arguments are no longer provided using operator << but instead in execute(), 
  so PreparedStatement is more generic now. Operator << and clearArguments() is thus removed.
- StatementType -> Type, added Arguments typedef
- execute() aborts now if at least one field provided on whereFieldNames list is not found
  (before it was ignored)
- internal: the statement is now created using utf8, not latin1 functions
- internal: to implement PreparedStatement in a driver, one has to write these methods:
    virtual bool executeInternal( const Arguments& args );
    virtual bool prepare(QByteArray& statement) = 0;
TODO: more changes like these related to WHERE expression
*  QuerySchema.cpp
*  QuerySchemaParameter.cpp
*  RecordData.cpp
*  Relationship.cpp
*  RowEditBuffer.cpp
*  SchemaData.cpp
*  TableSchema.cpp
  tools/SimpleCommandLineApp.cpp
*  Transaction.cpp
*  Utils.cpp

  Admin.h
  Alter.h
  Connection.h
  ConnectionData.h
  Connection_p.h
  Cursor.h
  Cursor_p.h
  DbObjectNameValidator.h
  DbProperties.h
  Driver.h
*  DriverManager.h
  DriverManager_p.h
  drivers/mysql/MysqlConnection.h
  drivers/mysql/MysqlConnection_p.h
  drivers/mysql/MysqlCursor.h
  drivers/mysql/MysqlDriver.h
  drivers/mysql/MysqlPreparedStatement.h
  drivers/odbc/odbcconnection.h
  drivers/odbc/odbcdriver.h
  drivers/oracle/oracleconnection.h
  drivers/oracle/oracleconnection_p.h
  drivers/oracle/oraclecursor.h
  drivers/oracle/oracledriver.h
  drivers/oracle/oraclepreparedstatement.h
  drivers/oracle/oracle_keywords.sh
  drivers/pqxx/PqxxConnection.h
  drivers/pqxx/PqxxConnection_p.h
  drivers/pqxx/PqxxCursor.h
  drivers/pqxx/PqxxDriver.h
  drivers/pqxx/PqxxPreparedStatement.h
  drivers/sqlite/driver/sqlite.h
  drivers/sqlite/SqliteAdmin.h
  drivers/sqlite/SqliteConnection.h
  drivers/sqlite/SqliteConnection_p.h
  drivers/sqlite/SqliteCursor.h
  drivers/sqlite/SqliteDriver.h
  drivers/sqlite/SqlitePreparedStatement.h
  drivers/sqlite/SqliteVacuum.h
  drivers/sybase/SybaseConnection.h
  drivers/sybase/SybaseConnection_p.h
  drivers/sybase/SybaseCursor.h
  drivers/sybase/SybaseDriver.h
  drivers/sybase/SybasePreparedStatement.h
  drivers/xbase/XbaseConnection.h
  drivers/xbase/XbaseConnection_p.h
  drivers/xbase/XbaseCursor.h
  drivers/xbase/XbaseDriver.h
  drivers/xbase/XbaseExport.h
  Driver_p.h
  Error.h
  Expression.h
  Field.h
  FieldList.h
  FieldValidator.h
  Global.h
  IndexSchema.h
  LookupFieldSchema.h
  MessageHandler.h
  Object.h
  parser/extract_tokens.sh
  parser/generate_parser_code.sh
  parser/Parser.h
  parser/Parser_p.h
  parser/SqlParser.h
  parser/SqlTypes.h
  predicate_export.h
  predicate_global.h
  PreparedStatement.h
  QuerySchema.h
  QuerySchemaParameter.h
  RecordData.h
  Relationship.h
  RowEditBuffer.h
  SchemaData.h
  TableSchema.h
  tools/SimpleCommandLineApp.h
* tools/Tristate.h
  Transaction.h
  Utils.h
  Utils_p.h

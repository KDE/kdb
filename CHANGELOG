Predicate CHANGELOG

2010-12-30
Predicate
*(*Expr) classes renamed to *Expression

2010-12-17
Predicate
*build system: use Predicate_SOURCE_DIR, Predicate_BINARY_DIR for clarity; generate predicate.pc and install it, append git hash to PREDICATE_VERSION_STRING
2010-12-16
Predicate
*fix memory leak in Connection::insertRecord: Conditional jump or move depends on uninitialised value(s)
*add missing "return dbg.space();" to QDebug operator<<(QDebug dbg, ..), otherwise crashes
PostgreSQL Driver
*fix building connection string, remove crash on closing database
*'tables' test passed

2010-12-15
Predicate
*Added Connection::drv_getServerVersion() and moved getting server version here from drv_connect() so PostgreSQL driver also can get version properly

2010-12-12
Moved to git: https://projects.kde.org/projects/playground/libs/predicate/repository

2010-12-03
Predicate
*RecordData is internally a low-level array of QVector pointers now, this adds speed and size optimizations; null values are null pointers there; more optimization planned (replacing QVariant since implicit sharing of values is not needed)

2010-11-03..2010-11-16
Predicate
*EscapedString introduced: specialized string for escaping. In addition to byte array, contains "validity" flag that is transferred when strings are concatenated or in general when any operation with invalid escaped string is performed.
*SQLite, MySQL, PostgreSQL Ported to EscapedString-based API

TODO: use QStringBuilder http://doc.qt.nokia.com/4.6/qstring.html
add
     #define QT_USE_FAST_CONCATENATION
     #define QT_USE_FAST_OPERATOR_PLUS

2010-10-30..2010-11-03
PostgreSQL Driver
*DriverBehaviour::QUOTATION_MARKS_FOR_IDENTIFIER changed from QChar to char
*option EscapeKexi in escape*() methods replaced by providing Predicate::escapeIdentifier() and Predicate::escapeString() functions
Predicate
*ConnectionData now contains optional databaseName attribute, so it is not needed to pass the name in useDatabase() (useful e.g. for SQLite)
*escaping is now based on Connection, not Driver (NOTE: string escaping hints: http://pastebin.com/Lagyyfj7)
*constness improved in the API
*use QString(char) when possible (small optimization)

2010-10-20
PostgreSQL Driver
*development of PostgreSQL driver based on libpq started, total rewrite of the 'pqxx' driver
Predicate
*add sanity checks to assignment operators
*add explicit ctors
*added BOOLEAN_TRUE_LITERAL, BOOLEAN_FALSE_LITERAL to DriverBehaviour, 1/0 by default, PostgreSQL driver changes them to TRUE/FALSE
SQLite Driver
*renamed from sqlite3 to sqlite for simplicity

2010-10-18
MySQL
*MySQL connections work again
*server supported by predicatefeaturestest: added -h option for host, -u for user, -p for password
**e.g. predicatefeaturestest --test tables -h myhost.com -u root -p pass mysql testdb

2010-10-17
DriverManager
*driversForMimeType() added
*driversInfo() removed as redundant

2010-10-13
*Port MySQL and SQLite drivers to the new API; some updates in other drivers but no tests

2010-09-05
*SDC
**added "operator==" option for generating operator== (deep comparison)

2010-08-19..21
*SDC
**properly generates code for more than one shared class per file
**add "#include <QSharedData>" is needed
*remaining bits: replaced KexiDB with Predicate
*Cursor, Driver and Connection no longer inherit QObject

2010-08-18
* replaced usage of 'row' term with 'record' in most places, e.g. Cursor::storeCurrentRow -> Cursor::storeCurrentRecord and RowEditBuffer with RecordEditBuffer, LookupFieldSchema::RowSource -> LookupFieldSchema::RecordSource

2010-08-06
*SDC
**added "namespace" option (string) for shared class, used in 
TODO: document SDC options

2010-08-05
*SDC
**added "with_from_to_map" option for shared class, generates extra methods as <file>_sdc.cpp:
***QMap<QString, QString> CLASSNAME::toMap() const;
***CLASSNAME(const QMap<QString, QString>& map, bool* ok);

2010-08-04
*SDC
**added support for protected option for data_member
**added support for "#if 0" blocks

2010-08-03
*ConnectionData is shared class (using SDC)

2010-07-21
*introducted Shared Data Compiler tool for creating implicitly shared classes
*introducted Result class using SDC, obsoletes Predicate::Object
**introducted Resultable helper

2010-07-18
*merge kexidb r1151238
*SQLite Driver: remove all sqlite_* macros, use sqlite3_* functions directly since we only support version 3
**use sqlite3_close() on sqlite3 structure instead of free(3)
***possible fix of crash in bug #245030

2010-07-08
*clean up the .desktop file format for drivers
**sqlite driver ported to that
*QT_PLUGIN_DIR is used to find predicate/ dir with drivers
*fix library version to 1.0.0
*all the drivers desktop files ported to the new plugin system
*use system sqlite

2010-05-10
*merge kexidb r1125175
*[security] SQLite: Set the secure-delete on, so SQLite overwrites deleted content with zeros. Works with 3.6.23. Earlier versions just ignore this pragma. See http://www.sqlite.org/pragma.html#pragma_secure_delete
TODO: add connection flags to the driver and global setting to control the "secure delete" pragma

2010-04-28
*merge kexidb r1119294
**MySQL Driver: Fix "DB created but cannot open" error appearing on creating a new database for mysql backend.
  See http://dev.mysql.com/doc/refman/5.0/en/identifier-case-sensitivity.html (complex!) for logic of otherwise simple thing.
  The solution is to execute SHOW VARIABLES LIKE 'lower_case_table_name' to get the flag and make the table and database names lowercase if needed.

2010-04-24
*merge kexidb r1116241:
**fix possible crash when adding two or more new columns to a table at once
**BUG:234194
**rename typedefs to use Const when needed

2010-01-31
SQLite (merged with kexidb)
*kexisql updated to 3.6.22
**we're still embedding sqlite in Kexi because of many options that are not set in distros, e.g. SECURE DELETE should be on by default http://sqlite.org/compile.html#secure_delete
**moved to amalgamation version for efficiency http://sqlite.org/amalgamation.html - makes it run faster
**moved directly to the SQLite driver - even more efficiency
**SQlite: "use database" operation no longer attempts to create new database if missing

2010-01-26
Queries (merged with kexidb)
*fixed memory ownership issues with data structures for ORDER BY in select queries
**this fixes generation of ORDER BY section of SQL statements
*improved debug of ORDER BY columns

2009-11-21
General
*merged with kexidb from KOffice trunk
*added versioning in the driver plugins using version_* symbols
*improved formatting
